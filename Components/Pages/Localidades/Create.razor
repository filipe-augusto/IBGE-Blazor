@page "/localidades/create"
@using CurrieTechnologies.Razor.SweetAlert2
@using IBGE_Blazor.Models
@using IBGE_Blazor.Data
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
@inject ApplicationDbContext Context;
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime
@inject SweetAlertService Swal
<Mensagem Texto="@_mensagem" TipoMensagem="@_tipoMensagem" Exibir="_exibir"></Mensagem>
<h3>NOVA LOCALIDADE</h3>
  
<EditForm Model="@Model" OnValidSubmit="@CreateLocal" FormName="criar-localidade-form">
    <DataAnnotationsValidator />
    <ValidationSummary />
@* <form Model="@model" @onsubmit="CreateLocal" method="post" @formname="criar-localidade-form"> *@
   @*  <AntiforgeryToken /> *@
    <div class="mb-3">
        <label for="Id" class="form-label">Codigo</label>
        <InputText class="form-control" type="text" id="Id" @bind-Value="Model.Id" />
    </div>

    <div class="mb-3">
        <label for="Cidade" class="form-label">Cidade</label>
        <InputText class="form-control" type="text" id="Cidade" @bind-Value="Model.City" />
    </div>

    <div class="mb-3">
        <label for="Estado" class="form-label">Estado</label>
        <InputText class="form-control" type="text" id="Estado" @bind-Value="Model.State" />
    </div>

    <button class="btn btn-success" type="submit">SALVAR</button>
@* </form> *@
</EditForm>


@code {
        [SupplyParameterFromForm]
        private Localidade? Model { get; set; } = new Localidade();
    private List<Localidade> localidades = new();
    private string? errorMessage = null;
    string _mensagem = "";
    string _tipoMensagem = "";
    string _exibir = "none";


    private bool pageReloaded = false;



   


    private async Task CreateLocal()
    {
        try
        {
            //VALIDAR SE CIDADE NAO EXISTE
            //AJUSTAR POST
            await Context.Cidades.AddAsync(Model);
            await Context.SaveChangesAsync();
            await JSRuntime.InvokeVoidAsync("alert", "Localidade criada com sucesso!");
            //await Swal.FireAsync("Sucesso", "Criado com sucesso", "success");
            await Task.Delay(2000);
            NavManager.NavigateTo("/localidades");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            await MostrarMensagem_Falha();
        }
    }

 

    async Task MostrarMensagem_Sucesso()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("MensagemCriacao");
        }
        catch (Exception ex)
        {}     
    }
    async Task MostrarMensagem_Falha()
    {
        await JSRuntime
       .InvokeVoidAsync("MensagemCriacao");
        StateHasChanged();

    }
    async Task ChamaMensagem(string mensagem, string tipomensagem, int quantidadeSegundos)
    {
        _mensagem = mensagem;
        _tipoMensagem = tipomensagem;
        _exibir = "block";
        await Task.Delay(quantidadeSegundos * 1000);
        _exibir = "none";
    }

}
