@page "/localidades"
@using IBGE_Blazor.Models;
@using IBGE_Blazor.Services.Localidades;
@using IBGE_Blazor.Shared.ViewModels;
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<AuthorizeView>
     <ChildContent>
<div class="row">
    <div class="col-10">
        <h1>Localidades</h1>
    </div>
    <div class="col-2">
        <a href="localidades/create" class="btn btn-primary" title="clique para criar uma localidade">
            <i class="oi oi-plus"></i> Criar </a>

        </div>
</div>
    </ChildContent>
</AuthorizeView>
<EditForm Model="@Search" OnValidSubmit="@Pesquisar" FormName="pesquisar-localidade-form">
   
    <div class="row">
        <div class="col-3">
            <label for="Cidade" class="form-label">Código</label>
            <InputText class="form-control" type="text" id="Id" @bind-Value="Search.Id" />
        </div>
        <div class="col-3">
            <label for="Cidade" class="form-label">Cidade</label>
            <InputText class="form-control" type="text" id="Cidade" @bind-Value="Search.City" />
            </div>

            <div class="col-3">
            <label for="Estado" class="form-label">Estado</label>
            <InputSelect id="Estado" @bind-Value="Search.State" class="form-control">
                @foreach (var estado in Estados)
                {
                    <option value="@estado">@estado</option>
                }
                <option value="">Nenhum</option>
            </InputSelect>

            </div>
        <div class="col-3 mt-4">
            <button class="btn btn-danger mt-1" type="submit" title="pesquisar localidade">
                Pesquisar
            </button>
            </div>
    </div>
        </EditForm>

@if(Model == null)
{
    <span>...carregando</span>
}
@if (Model != null)
{
    <hr/>
    <table class="table table-hover mt-4">
        <thead class="table-primary">
            <tr>
                <td>Codigo</td>
                <td>Cidade</td>
                <td>Estado</td>
                <td></td>
            </tr>
        </thead>
        <tbody>
            @foreach (var localidade in Model)
            {
                <tr>
                    <td>@localidade.Id</td>
                    <td>@localidade.City</td>
                    <td>@localidade.State</td>
                    <td>

                        <a href="/localidades/detalhes/@localidade.Id" >Detalhes</a>

                    </td> 
                </tr>
            }

        </tbody>
    </table>
}

@code {
    [SupplyParameterFromForm]
    public LocalidadeViewModel Search { get; set; } = new();
    protected IPagedList<Localidade> Model = null;
    [Inject]
    private LocalidadeServices _service { get; set; }
    private PaginationModel<EnumLocalidadeOrdenarPor> pagination { get; set; } = new();

    protected List<string> Estados { get; set; } = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        pagination.OrdenarPor = EnumLocalidadeOrdenarPor.NomeAsc;

        Estados = await _service.ObterEstados();
        Model = await _service.ObterLocalidades(pagination.PaginaAtual, pagination.TamanhoPagina, pagination.OrdenarPor);
        pagination.TotalPaginas = Model.TotalPaginas;
    }
    private async Task TrocarPagina(int novaPagina)
    {
        Model = await _service.ObterLocalidades(
            novaPagina,
            pagination.TamanhoPagina,
            pagination.OrdenarPor,
            Search.Id,
            Search.State,
            Search.City);
    }
    private async Task Pesquisar()
    {
 
        pagination.PaginaAtual = 1;
        Model = await _service.ObterLocalidades(
            pagination.PaginaAtual,
            pagination.TamanhoPagina,
            pagination.OrdenarPor,
            string.IsNullOrEmpty(Search.Id) ? null : Search.Id,
            string.IsNullOrEmpty(Search.State) ? null : Search.State,
            string.IsNullOrEmpty(Search.City) ? null : Search.City
        );
    }
}