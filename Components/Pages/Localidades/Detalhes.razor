@page "/localidades/detalhes/{id}"
@using IBGE_Blazor.Models
@using IBGE_Blazor.Data
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext Context;
@inject NavigationManager NavManager
@rendermode InteractiveServer
@inject SweetAlertService Swal;
@inject IJSRuntime JSRuntime
<div class="row">


    <h1>@Model?.City</h1>

    <EditForm Model="@Model" OnValidSubmit="@EditarLocal" FormName="editar-localidade-form">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label for="Cidade" class="form-label">Cidade</label>
            <InputText class="form-control" type="text" id="Id" @bind-Value="Model.Id" disabled />
        </div>
        <div class="mb-3">
            <label for="Cidade" class="form-label">Cidade</label>
            <InputText class="form-control" type="text" id="Cidade" @bind-Value="Model.City" />
        </div>

        <div class="mb-3">
            <label for="Estado" class="form-label">Estado</label>
            <InputText class="form-control" type="text" id="Estado" @bind-Value="Model.State" />
        </div>


        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                @errorMessage
            </div>
        }
        <div class="row">
            <div class="col-3">
                <button class="btn btn-success" type="submit">SALVAR</button>

            </div>
            <div class="col-3">
               @*  <NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" /> *@
                <button class="btn btn-danger" @onclick="DeleteLocal"> Excluir</button>
            </div>
            <div class="col-6">
            </div>
        </div>
    </EditForm>
</div>
<div class="row">
    <div class="col-12">
    </div>
</div>


@code {

    [SupplyParameterFromForm]
    private Localidade? Model { get; set; } = new();
    [Parameter]
    public string Id { get; set; }
    private List<Localidade> categories = new();
    private string? errorMessage = null;

    protected override async Task OnInitializedAsync()
    {

        Model = await Context.Cidades.AsNoTracking().FirstOrDefaultAsync(x => x.Id == Id);
    }

    private async Task EditarLocal()
    {
        try
        {
            var cidade = await Context.Cidades.FirstOrDefaultAsync(x => x.Id == Id);
            if (cidade is null)
                throw new Exception("Cidade não encontrado");

            cidade.City = Model.City;
            cidade.State = Model.State;


            Context.Cidades.Update(cidade);
            await Context.SaveChangesAsync();
            await JSRuntime.InvokeVoidAsync("alert", "Localidade editada com sucesso!");
            NavManager.NavigateTo("/localidades");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }




    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {

        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmation",
                Text = "Você tem certeza que deseja excluir esse registro?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Sim, desejo cancelar",
                CancelButtonText = "Não"
            });

        var confirm = !string.IsNullOrEmpty(result.Value);

        if (!confirm)
        {
            context.PreventNavigation();
        }

    }

    private async Task DeleteLocal()
    {

        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Você confirma a exclusão?");

        if (confirm == true)
        {
            
        var local = await Context.Cidades.FirstOrDefaultAsync(x => x.Id == Id);
                if (local is null)
                    throw new Exception("Produto não encontrado");
                Context.Cidades.Remove(local);
                await Context.SaveChangesAsync();
            await JSRuntime.InvokeVoidAsync("alert", "Localidade excluida!");
                NavManager.NavigateTo("/localidades");
        }
    }

}